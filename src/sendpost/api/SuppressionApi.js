/**
 * SendPost API
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CountStat from '../model/CountStat';
import RDSuppression from '../model/RDSuppression';
import RSuppression from '../model/RSuppression';
import Suppression from '../model/Suppression';

/**
* Suppression service.
* @module sendpost/api/SuppressionApi
* @version 1.1.1
*/
export default class SuppressionApi {

    /**
    * Constructs a new SuppressionApi. 
    * @alias module:sendpost/api/SuppressionApi
    * @class
    * @param {module:sendpost/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sendpost/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Count Total Suppressions
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendpost/model/CountStat} and HTTP response
     */
    countWithHttpInfo(xSubAccountApiKey, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling count");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountStat;
      return this.apiClient.callApi(
        '/subaccount/suppression/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Total Suppressions
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendpost/model/CountStat}
     */
    count(xSubAccountApiKey, opts) {
      return this.countWithHttpInfo(xSubAccountApiKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add Email Addresses To Suppression List
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {module:sendpost/model/RSuppression} [rSuppression] Suppression content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendpost/model/Suppression>} and HTTP response
     */
    createSuppressionsWithHttpInfo(xSubAccountApiKey, opts) {
      opts = opts || {};
      let postBody = opts['rSuppression'];
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling createSuppressions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/subaccount/suppression/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Email Addresses To Suppression List
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {module:sendpost/model/RSuppression} opts.rSuppression Suppression content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendpost/model/Suppression>}
     */
    createSuppressions(xSubAccountApiKey, opts) {
      return this.createSuppressionsWithHttpInfo(xSubAccountApiKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specific emails which are in suppression list
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {module:sendpost/model/RDSuppression} [rDSuppression] Suppression content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sendpost/model/Suppression} and HTTP response
     */
    deleteSuppressionWithHttpInfo(xSubAccountApiKey, opts) {
      opts = opts || {};
      let postBody = opts['rDSuppression'];
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling deleteSuppression");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Suppression;
      return this.apiClient.callApi(
        '/subaccount/suppression/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specific emails which are in suppression list
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {module:sendpost/model/RDSuppression} opts.rDSuppression Suppression content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sendpost/model/Suppression}
     */
    deleteSuppression(xSubAccountApiKey, opts) {
      return this.deleteSuppressionWithHttpInfo(xSubAccountApiKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all suppressions
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] offset
     * @param {Number} [limit] limit
     * @param {String} [search] search
     * @param {String} [from] from date
     * @param {String} [to] to date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:sendpost/model/Suppression>} and HTTP response
     */
    getSuppressionsWithHttpInfo(xSubAccountApiKey, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xSubAccountApiKey' is set
      if (xSubAccountApiKey === undefined || xSubAccountApiKey === null) {
        throw new Error("Missing the required parameter 'xSubAccountApiKey' when calling getSuppressions");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'search': opts['search'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
        'X-SubAccount-ApiKey': xSubAccountApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/subaccount/suppression/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all suppressions
     * @param {String} xSubAccountApiKey Sub-Account API Key
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset offset
     * @param {Number} opts.limit limit
     * @param {String} opts.search search
     * @param {String} opts.from from date
     * @param {String} opts.to to date
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:sendpost/model/Suppression>}
     */
    getSuppressions(xSubAccountApiKey, opts) {
      return this.getSuppressionsWithHttpInfo(xSubAccountApiKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
